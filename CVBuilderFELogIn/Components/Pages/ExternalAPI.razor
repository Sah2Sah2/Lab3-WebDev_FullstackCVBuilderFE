@page "/ExternalAPI"

@inject ApiService ApiService
@inject NavigationManager NavigationManager
@inject AuthenticationStateProvider AuthenticationStateProvider
@inject HttpClient Http
@inject IConfiguration Configuration

@using Microsoft.AspNetCore.Components.Authorization
@using CVBuilderFELogIn.Models
@using CVBuilderFELogIn.Services

@rendermode InteractiveServer

<PageTitle>Cat Pictures</PageTitle>

<section class="cat-main-section">
    <!-- Home Button -->
    <div class="home-icon">
        <a href="/" title="Landing Page">
            <i class="fas fa-home"></i>
        </a>
    </div>

    <section class="cat-text-section">
        <div class="cat-container cat-pics">
            <h3 class="cat-title">
                Feeling stressed after having seen all these codes?
                <br /> Don't worry!
                <br /> I have the solution for you:
                <br /> cute cats!
            </h3>
        </div>
    </section>

    <section class="cat-button-section">
        <div class="cat-container">
            <button @onclick="LoadRandomCat" class="cat-button">
                <i class="fas fa-cat"></i>
            </button>
        </div>
    </section>

    <section class="cat-image-section">
        <div class="cat-container cat-pics">
            <div class="image-container">
                @if (!string.IsNullOrEmpty(catImageUrl))
                {
                    <img id="cat-image" src="@catImageUrl" alt="Random Cat" />
                }
            </div>
        </div>
    </section>
</section>


@code {
    private string catImageUrl = "";
    private string apiKey;

    protected override void OnInitialized()
    {
        apiKey = Configuration["CatApiSettings:ApiKey"];
    }

    private async Task LoadRandomCat()
    {
        try
        {
            // Get the API key from env var or from appsettings 
            var apiKey = Environment.GetEnvironmentVariable("THE_CAT_API_KEY")
                         ?? Configuration["CatApiSettings:ApiKey"]; // Update this in A when deployed

            if (string.IsNullOrEmpty(apiKey))
            {
                Console.WriteLine("API key is missing.");
                catImageUrl = string.Empty;
                return;
            }

            var response = await Http.GetFromJsonAsync<List<CatImage>>($"https://api.thecatapi.com/v1/images/search?api_key={apiKey}");

            if (response != null && response.Any())
            {
                catImageUrl = response[0]?.Url ?? string.Empty;
            }
            else
            {
                catImageUrl = string.Empty;
            }

            StateHasChanged();
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error loading cat image: {ex.Message}");
            catImageUrl = string.Empty;
        }
    }

    private void GoHome()
    {
        NavigationManager.NavigateTo("/");
    }

    public class CatImage
    {
        public string Url { get; set; }
    }
}
